{
  "_args": [
    [
      {
        "raw": "readline-vim@~0.3.0",
        "scope": null,
        "escapedName": "readline-vim",
        "name": "readline-vim",
        "rawSpec": "~0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/home/paclan/repositorios/bug-clinic/node_modules/replpad"
    ]
  ],
  "_from": "readline-vim@>=0.3.0 <0.4.0",
  "_id": "readline-vim@0.3.2",
  "_inCache": true,
  "_location": "/readline-vim",
  "_npmUser": {
    "name": "thlorenz",
    "email": "thlorenz@gmx.de"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "readline-vim@~0.3.0",
    "scope": null,
    "escapedName": "readline-vim",
    "name": "readline-vim",
    "rawSpec": "~0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/replpad"
  ],
  "_resolved": "https://registry.npmjs.org/readline-vim/-/readline-vim-0.3.2.tgz",
  "_shasum": "bf34c1f506805b40c0e1fff380ba633fa5162dbd",
  "_shrinkwrap": null,
  "_spec": "readline-vim@~0.3.0",
  "_where": "/home/paclan/repositorios/bug-clinic/node_modules/replpad",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "thlorenz.com"
  },
  "bugs": {
    "url": "https://github.com/thlorenz/readline-vim/issues"
  },
  "dependencies": {
    "parse-key": "~0.2.0",
    "stringify-key": "~0.1.2"
  },
  "description": "Adds vim bindings to nodejs readline.",
  "devDependencies": {
    "proxyquire": "~0.4.0",
    "readline-testharness": "~0.3.0",
    "sinon": "~1.5.2",
    "tap": "~0.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "bf34c1f506805b40c0e1fff380ba633fa5162dbd",
    "tarball": "https://registry.npmjs.org/readline-vim/-/readline-vim-0.3.2.tgz"
  },
  "gitHead": "26f68bc9dc257f5f511165d0949dc97a73b7625d",
  "homepage": "https://github.com/thlorenz/readline-vim#readme",
  "keywords": [
    "readline",
    "vim",
    "shortcuts",
    "console",
    "keyboard",
    "keys"
  ],
  "license": "MIT",
  "main": "readline-vim.js",
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    }
  ],
  "name": "readline-vim",
  "optionalDependencies": {},
  "readme": "# readline-vim [![build status](https://secure.travis-ci.org/thlorenz/readline-vim.png)](http://next.travis-ci.org/thlorenz/readline-vim)\n\nAdds vim bindings to nodejs readline.\n\n## Installation\n\n    npm install readline-vim\n\n## Usage\n\n**Repl Example:**\n```js\nvar rlv = require('readline-vim')\n  , repl = require('repl');\n\nvar r = repl.start({\n    prompt: \"vim repl > \",\n    input: process.stdin,\n    output: process.stdout\n  });\n\n// pass the readline component of the repl in order to add vim bindings to it\nvar vim = rlv(r.rli)\n  , map = vim.map;\n\n// Add mappings\n\n// [insert mode] allow switching to normal mode by typing 'jk' quickly \nmap.insert('jk', 'esc');\n\n// [insert mode] go backward in history via 'ctrl-k' \nmap.insert('ctrl-k', 'ctrl-p');\n\n// [insert mode] go backward in history via 'ctrl-k' \nmap.insert('ctrl-space', 'ctrl-n');\n\n// [normal mode] go backward in history via space bar\nmap.normal('space', 'k');\n\n// [normal mode] go forward in history via space bar when ctrl is pressed \nmap.normal('ctrl-space', 'j');\n```\n\nRun it via: `npm run demo`\n\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n\n- [Vim Bindings](#vim-bindings)\n  - [Insert Mode](#insert-mode)\n  - [Normal Mode](#normal-mode)\n    - [Movements](#movements)\n    - [Movements combined with Actions](#movements-combined-with-actions)\n    - [Replacements](#replacements)\n    - [History](#history)\n- [Mappings](#mappings)\n  - [Immediate Mappings](#immediate-mappings)\n  - [Sequence Mappings](#sequence-mappings)\n  - [Inspecting Mappings](#inspecting-mappings)\n- [Events](#events)\n- [Forcing the Readline into a Mode](#forcing-the-readline-into-a-mode)\n- [Examples](#examples)\n\n## Vim Bindings\n\nA subset of vim keybindings is supported by `readline-vim`:\n\n### Insert Mode\n\n- `Esc`, `Ctrl-[`: normal mode\n\n### Normal Mode\n\n- `i`, `I`, `a`, `A`: insert mode with the expected side effects\n\n#### Movements\n\n- `h` cursor left\n- `l` cursor right\n- `w` word right\n- `b` word left\n- `0` beginning of line\n- `$` end of line\n- `f`, `F`, `t`, `T` followed by letter moves cursor to or up to the given letter\n\n#### Movements combined with Actions\n\n- `cb`: change word left\n- `cw`: change word right\n- `ch`: change left\n- `cl`: change right\n- `cc`: change line\n- `C` : change line right\n\n- `db`: delete word left\n- `dw`: delete word right\n- `dh`: delete left\n- `dl`: delete right\n- `dd`: delete line\n- `D` : delete line right\n\n- `x` delete right\n- `X` delete left\n\n#### Replacement\n\n- `r` followed by letter replaces letter under the cursor with the given letter (i.e. `rx`)\n\n#### History\n\n- `k` go back in history\n- `j` go forward in history\n\n## Mappings\n\n### Immediate Mappings\n\nImmediate mappings execute immediately whe a key (possibly with modifiers) is pressed.\n\nThey can be applied in insert and normal mode.\n\nAssuming we defined `vim` and `map` as outlined in the [usage examle](#usage).\n\n```js\n// emit [esc] when [ctrl-space] is pressed to switch to normal mode\nmap.insert('ctrl-space', 'esc');\n\n// emit [k] when [space] is pressed to go backward in history\nmap.normal('space', 'k');\n```\n\n### Sequence Mappings\n\nSequence mappings are a number of keys **without modifiers** pressed quickly after another.\n\nThey can be applied to **insert mode only**.\n\nAssuming we defined `vim` and `map` as outlined in the [usage examle](#usage).\n\n```js\n// map [jk] pressed in quick succession to [esc] to switch to normal mode\nmap.insert('jk', 'esc');\n```\n\nThe interval allowed between keys in order to count as a sequence can be configured by setting `vim.threshold`, the\ndefault is `200 milliseconds`.\n\n### Inspecting Mappings\n\nYou can inspect your mappings by navigating/printing the `vim.map.mappings` object.\n\n## Events\n\nThe following events are emitted to allow reacting to state changes:\n\n- `normal` when mode changes to normal\n- `insert` when mode changes to insert\n- `write` when a key is written to the underlying `readline` (i.e. it wasn't handled by `readline-vim` and therefore\n  passed through\n\nThese events are exposed via `vim.events`, so to subscribe to normal mode changes you would do:\n\n```js\nvim.events.on('normal', function () {\n  // do something here to react\n});\n```\n\n## Forcing the Readline into a Mode\n\nYou can cause the `readline` to change to a particular mode and pass a `Boolean` to indicate if that mode change should\nbe kept a secret (i.e. no event is emitted).\n\n```js\nvim.forceInsert();      // changes mode to insert and emits 'insert' event\nvim.forceNormal(true);  // changes mode to normal, but emits no event\n```\n\n## Examples\n\n- [simple readline](https://github.com/thlorenz/readline-vim/blob/master/examples/readline.js)\n- [repl](https://github.com/thlorenz/readline-vim/blob/master/examples/repl.js)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/readline-vim.git"
  },
  "scripts": {
    "demo": "node ./examples/repl",
    "test": "tap test"
  },
  "version": "0.3.2"
}
