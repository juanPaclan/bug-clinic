{
  "_args": [
    [
      {
        "raw": "snippetify@~0.2.1",
        "scope": null,
        "escapedName": "snippetify",
        "name": "snippetify",
        "rawSpec": "~0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "/home/paclan/repositorios/bug-clinic/node_modules/scriptie-talkie"
    ]
  ],
  "_from": "snippetify@>=0.2.1 <0.3.0",
  "_id": "snippetify@0.2.1",
  "_inCache": true,
  "_location": "/snippetify",
  "_npmUser": {
    "name": "thlorenz",
    "email": "thlorenz@gmx.de"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "snippetify@~0.2.1",
    "scope": null,
    "escapedName": "snippetify",
    "name": "snippetify",
    "rawSpec": "~0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/scriptie-talkie"
  ],
  "_resolved": "https://registry.npmjs.org/snippetify/-/snippetify-0.2.1.tgz",
  "_shasum": "8d9a7ce06d147be50992411dc3e3bd5cbe7818b4",
  "_shrinkwrap": null,
  "_spec": "snippetify@~0.2.1",
  "_where": "/home/paclan/repositorios/bug-clinic/node_modules/scriptie-talkie",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "bugs": {
    "url": "https://github.com/thlorenz/snippetify/issues"
  },
  "dependencies": {
    "esprima": "~1.0.2"
  },
  "description": "Splits a given JavaScript file into as many parsable snippets as possible.",
  "devDependencies": {
    "ansistyles": "~0.1.1",
    "cardinal": "~0.3.1",
    "difflet": "~0.2.3",
    "trap": "~0.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "8d9a7ce06d147be50992411dc3e3bd5cbe7818b4",
    "tarball": "https://registry.npmjs.org/snippetify/-/snippetify-0.2.1.tgz"
  },
  "engine": {
    "node": ">=0.6"
  },
  "homepage": "https://github.com/thlorenz/snippetify",
  "keywords": [
    "snippet",
    "parse",
    "split",
    "script"
  ],
  "license": "MIT",
  "main": "snippetify.js",
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    }
  ],
  "name": "snippetify",
  "optionalDependencies": {},
  "readme": "# snippetify [![build status](https://secure.travis-ci.org/thlorenz/snippetify.png)](http://next.travis-ci.org/thlorenz/snippetify)\n\nSplits a given JavaScript file into as many parsable snippets as possible.\n\n## Example\n\n```js\n'use strict';\nvar fs         =  require('fs')\n  , snippetify =  require('..')\n  , code       =  fs.readFileSync(__filename, 'utf-8')\n  , snippets   =  snippetify(code);\n\nfunction printRawCode(snippets) {\n  // prints all lines exactly as they appeared in the script\n  var lines = snippets\n    .map(function (x) { return '[ ' + x.raw + ' ]'; });\n\n  console.log(lines.join('\\n'));\n}\n\nprintRawCode(snippets);\n```\n\nOutputs:\n\n```js\n[ 'use strict'; ]\n[ var fs         =  require('fs') ]\n[   , snippetify =  require('..') ]\n[   , code       =  fs.readFileSync(__filename, 'utf-8') ]\n[   , snippets   =  snippetify(code); ]\n[  ]\n[ function printRawCode(snippets) {\n  // prints all lines exactly as they appeared in the script\n  var lines = snippets\n    .map(function (x) { return '[ ' + x.raw + ' ]'; });\n\n  console.log(lines.join('\\n'));\n} ]\n[  ]\n[ printRawCode(snippets); ]\n[  ]\n```\n\n## API\n\n```js\nsnippetify(script[, esprimaOpts])\n```\n\n```\n/**\n * Splits given script into as many root level snippets as possible, one line being the smallest possible.\n * Keeps root level expressions intact, i.e. does not pull out snippets from inside functions.\n * \n * @name snippetify\n * @function\n * @param script {String} The script to split into snippets.\n * @param opts {Object} Options, most of which will be passed to the esprima parser (optional):\n *    loc      :  Nodes have line and column-based location info\n *    range    :  Nodes have an index-based location range (array)\n *    raw      :  Literals have extra property which stores the verbatim source\n *    tokens   :  An extra array containing all found tokens\n *    comment  :  An extra array containing all line and block comments\n *    tolerant :  An extra array containing all errors found, attempts to continue parsing when an error is encountered\n *  -- Non esprima opts:\n *    nonstrict:  Removes 'use strict' directives during parse to prevent esprima parser from throwing errors due to use strict violations\n * @return {Array{Object}} each with the following properties:\n *    code     :  The snippet code that was parsed and possibly fixed\n *    raw      :  The snippet code that was parsed before it was fixed\n *    ast      :  The AST for the snippet (note ast.tokens will be present if tokens: true is set)\n */\n```\n\n## More Examples\n\nFind more examples [here](https://github.com/thlorenz/snippetify/tree/master/examples)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/snippetify.git"
  },
  "scripts": {
    "test": "node-trap test/*.js"
  },
  "version": "0.2.1"
}
