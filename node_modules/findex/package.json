{
  "_args": [
    [
      {
        "raw": "findex@~0.2.1",
        "scope": null,
        "escapedName": "findex",
        "name": "findex",
        "rawSpec": "~0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "/home/paclan/repositorios/bug-clinic/node_modules/replpad"
    ]
  ],
  "_from": "findex@>=0.2.1 <0.3.0",
  "_id": "findex@0.2.3",
  "_inCache": true,
  "_location": "/findex",
  "_npmUser": {
    "name": "thlorenz",
    "email": "thlorenz@gmx.de"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {
    "graceful-fs": "2.0.3",
    "minimatch": "0.2.14"
  },
  "_requested": {
    "raw": "findex@~0.2.1",
    "scope": null,
    "escapedName": "findex",
    "name": "findex",
    "rawSpec": "~0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/replpad"
  ],
  "_resolved": "https://registry.npmjs.org/findex/-/findex-0.2.3.tgz",
  "_shasum": "9e4cafee229785f2781a341e96760e2198bcfa10",
  "_shrinkwrap": null,
  "_spec": "findex@~0.2.1",
  "_where": "/home/paclan/repositorios/bug-clinic/node_modules/replpad",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "browser": "browser.js",
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "bugs": {
    "url": "https://github.com/thlorenz/findex/issues"
  },
  "dependencies": {
    "JSONSelect": "~0.4.0",
    "esprima": "~1.0.3",
    "readdirp": "~0.3.1",
    "unique-concat": "~0.1.3"
  },
  "description": "Indexes locations of functions inside a project by the md5 hash of the function string to find them later.",
  "devDependencies": {
    "brfs": "0.0.6",
    "browserify": "~2.25.0",
    "ecstatic": "~0.4.5",
    "mold-source-map": "~0.2.0",
    "nave": "~0.4.3",
    "nodemon": "~0.7.8",
    "tap": "~0.4.3",
    "tape": "~1.0.4",
    "testling": "~1.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "9e4cafee229785f2781a341e96760e2198bcfa10",
    "tarball": "https://registry.npmjs.org/findex/-/findex-0.2.3.tgz"
  },
  "engine": {
    "node": ">=0.6"
  },
  "homepage": "https://github.com/thlorenz/findex",
  "keywords": [
    "index",
    "find",
    "locate",
    "location",
    "function",
    "file",
    "line",
    "lineNumber"
  ],
  "license": {
    "type": "MIT",
    "url": "https://github.com/thlorenz/findex/blob/master/LICENSE"
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    }
  ],
  "name": "findex",
  "optionalDependencies": {},
  "readme": "# findex [![build status](https://secure.travis-ci.org/thlorenz/findex.png)](http://travis-ci.org/thlorenz/findex)\n\n[![testling badge](https://ci.testling.com/thlorenz/findex.png)](https://ci.testling.com/thlorenz/findex)\n\nIndexes locations of functions inside a project by the md5 hash of the function string to find them later.\n\n```js\nvar findex = require('findex');\n\nfunction functionToFind() {\n  console.log('as you can see I am on lines 3 - 5 in indexNFind.js');\n}\n\nfunctionToFind();\n\nfindex(function (err, index) {\n  if (err) return console.error(err);\n  console.log(index.find(functionToFind));\n});\n```\n\n```\n[ { file: '/Users/thlorenz/dev/js/projects/findex/example/indexNfind.js',\n    start: { line: 3, column: 0 },\n    end: { line: 5, column: 1 },\n    lines: 2,\n    range: [ 29, 128 ] } ]\n```\n\n## Installation\n\n    npm install findex\n\n## API\n\n###*findex(opts, cb)*\n\n```\n/**\n * Indexes all functions found in all files found in all directories and subdirectories of the given root or the working directory.\n *\n * @name exports\n * @function\n * @param opts {Object} Options, most of which are passed to readdirp after setting the following defaults if they weren't supplied:\n *    root: working directory\n *    fileFilter: '*.js'\n *    directoryFilter: [ '!.git', '!.svn', '!node_modules' ]\n *  Options not passed to readdirp:\n *    indexes: previously gathered indexes to which extra ones should be added, defaults to {}\n * @param cb {Function} called back with the function locations indexed by the md5 hash of the Function.toString() values\n */\n```\n\n###*findex.file(js, fullPath, indexes)*\n\n```\n/**\n * Indexes all functions in the given file content and adds them to the given indexes.\n *\n * @name exports\n * @function\n * @param js {String} the JavaScript file content\n * @param fullPath {String} full path at which the file can be found (optional, defaults to 'source.js')\n * @param indexes {Object} indexes that have been collected so far (optional, defaults to {})\n * @return {Object} the updated indexes which will have an `error` property if one occurred\n */\n```\n\n###*findex.fork(opts, cb)*\n\nSame as findex, except that it forks a child process to do the work - AST creation can be slow.\n\nUse this findex alternative if you evaluate lots of files (in larger projects)\nand the AST creation is blocking your main process for too long.\n\nThe arguments it expects are exactly the same as [***findex(opts,\ncb)***](https://github.com/thlorenz/findex#findexopts-cb) does.\n\n###*indexes.find(fn)*\n\nWhen the indexes get updated, either via ***findex()*** or ***findex.file***, a `find` method is added to them. Call\nthem with either a `Function` or the result of `Function.toString()` to have it return the location of that function or\n`null` if it wasn't indexed.\n\n###*indexes.indexedDirs*\n\nThis is only relevant when indexing a project (i.e. a directory and its subdirectories) and are useful in case you want\nto add them to the `directoryFilter` for the next indexing operation to avoid indexing the same directory twice.\n\n\n- it will contain an array of unique directories that were examined to create the indexes \n- if indexes that are passed to it already have `indexedDirs`, they will be concatenated with the ones examined\n\n###*findex.find(fn)*\n\n```\n/**\n * find function that is attached to the indexes after they have been created.\n * It is part of the API since sometimes it needs to be recreated manually,\n * i.e. when a new indexes instance is created by extending one set of indexes with another one\n *\n * @name find\n * @function\n * @param this {Object} bind the indexes to this function, i.e.: var f = find.bind(indexes); f(fn);\n * @param fn {Function} the function or Function.toString() representation of the function to find\n * @return {[Object]} locations information about the function, including file, line, column and range\n */\n ```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/findex.git"
  },
  "scripts": {
    "tape": "testling -x open",
    "tape-dev": "nodemon ./test/browser/dev-server.js",
    "test": "npm run test-main",
    "test-0.10": "nave use 0.10 npm run test-main",
    "test-0.8": "nave use 0.8 npm run test-main",
    "test-all": "npm run test-main && npm run test-0.8 && npm run test-0.10 && npm run tape",
    "test-main": "set -e; for t in test/*.js; do node $t; done",
    "test-xvfb": "xvfb-run ./node_modules/.bin/testling"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "version": "0.2.3"
}
